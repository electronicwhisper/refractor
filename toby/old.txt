plasmaShader = {
  data: {
    screenWidth: new GLOW.Float( window.innerWidth )
    screenHeight: new GLOW.Float( window.innerHeight )
    resolution: new GLOW.Vector2(window.innerWidth, window.innerHeight)
    time: new GLOW.Float()
    vertices: GLOW.Geometry.Plane.vertices()
    uvs: GLOW.Geometry.Plane.uvs()
    tex0: new GLOW.Texture( "clouds.jpg" )
  }
  
  elements: GLOW.Geometry.Plane.elements()
  
  vertexShader: """
    attribute vec3 vertices;
    attribute vec2 uvs;
    varying vec2 uv;
    
    void main(void) {
      uv = uvs;
      gl_Position = vec4( vertices.x, vertices.y, 1.0, 1.0 );
    }
    """
  
  # fragmentShader: """
  #   #ifdef GL_ES
  #     precision highp float;
  #   #endif
  #   
  #   uniform float screenWidth;
  #   uniform float screenHeight;
  #   uniform float time;
  # 
  #   varying vec2 uv;
  # 
  #   void main( void ) {
  #     float x = gl_FragCoord.x / screenWidth;
  #     float y = gl_FragCoord.y / screenHeight;
  #     float sinTime = sin( time );
  #     float cosTime = cos( time );
  #     float twoTime = time * 2.0;
  #     float red = ( sin( x * cosTime * 5.0 ) + cos( y * 6.0 + time + cosTime )) * ( sinTime * 0.25 + 0.25 ) + 0.5;
  #     float green = ( sin( cosTime ) * cos( y * cosTime )) * 0.2 + 0.5;
  #     float blue = ( sin( x * sinTime * 5.0 + time ) + cos( y * 5.0 * cosTime + time * cosTime )) * ( cosTime * 0.25 + 0.25 ) + 0.5;
  #     gl_FragColor = vec4( red, green, blue, 1.0 );
  #   }
  #   """
  
  # fragmentShader: """
  #   
  #   #ifdef GL_ES
  #   precision highp float;
  #   #endif
  # 
  #   uniform vec2 resolution;
  #   uniform float time;
  #   uniform sampler2D tex0;
  # 
  #   // Set color at the current fragment, with given coords
  #   // and whether it should be "hole" or not.
  #   void setColor(vec2 coord, bool isHole) {
  #     if (isHole)
  #       gl_FragColor = vec4(texture2D(tex0, coord).xyz, 1.0);
  #     else
  #       gl_FragColor = vec4(coord.x, 0.5, coord.y, 1.0);
  #   }
  # 
  #   // Sierpinski carpet - with anti-holes!
  #   // Maybe call it "Sierpinski tablecloth". If it doesn't already have a name.
  #   void main(void)
  #   {
  #     ivec2 sectors;
  #     vec2 coordOrig = gl_FragCoord.xy / resolution.xy;
  #     const int lim = 5;
  #     // Toggle between "carpet" and "tablecloth" every 3 seconds.
  #     bool doInverseHoles = (mod(time, 6.0) < 3.0);
  # 
  #     /* If you want it to spin, just to prove that it is redrawing
  #     the carpet every frame: */
  #     vec2 center = vec2(0.5, 0.5);
  #     mat2 rotation = mat2(
  #           vec2( cos(time), sin(time)),
  #           vec2(-sin(time), cos(time))
  #       );
  #       vec2 coordRot = rotation * (coordOrig - center) + center;
  #     // rotation can put us out of bounds
  #     if (coordRot.x < 0.0 || coordRot.x > 1.0 ||
  #       coordRot.y < 0.0 || coordRot.y > 1.0) {
  #       setColor(coordOrig, true);
  #       return;
  #     }
  # 
  #     vec2 coordIter = coordRot;
  #     bool isHole = false;
  # 
  #     for (int i=0; i < lim; i++) {
  #       sectors = ivec2(floor(coordIter.xy * 3.0));
  #       if (sectors.x == 1 && sectors.y == 1) {
  #         if (doInverseHoles) {
  #           isHole = !isHole;
  #         } else {
  #           setColor(coordOrig, true);
  #           return;
  #         }
  #       }
  # 
  #       if (i + 1 < lim) {
  #         // map current sector to whole carpet
  #         coordIter.xy = coordIter.xy * 3.0 - vec2(sectors.xy);
  #       }
  #     }
  # 
  #     setColor(isHole ? coordOrig : coordRot, isHole);
  #   }
  #   
  #   """
  
  fragmentShader: """
    #ifdef GL_ES
    precision highp float;
    #endif

    uniform vec2 resolution;
    uniform float time;
    uniform sampler2D tex0;
    uniform sampler2D tex1;

    void main(void)
    {
        vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;
        vec2 uv;

        float a = atan(p.y,p.x);
        float r = sqrt(dot(p,p));

        uv.x =          7.0*a/3.1416;
        uv.y = -time+ sin(7.0*r+time) + .7*cos(time+7.0*a);

        float w = .5+.5*(sin(time+7.0*r)+ .7*cos(time+7.0*a));

        vec3 col =  texture2D(tex0,uv*.5).xyz;

        gl_FragColor = vec4(col*w,1.0);
    }
    """
  
}